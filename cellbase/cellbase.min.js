CellBaseDataAdapter.prototype.toJSON=DataAdapter.prototype.toJSON;function CellBaseDataAdapter(a){DataAdapter.prototype.constructor.call(this);this.cellBaseManager=new CellBaseManager(a);this.successed=new Event}CellBaseDataAdapter.prototype.getVersion=function(){return this.cellBaseManager.getVersion()};CellBaseDataAdapter.prototype.getSpecies=function(){return this.cellBaseManager.getSpecies()};CellBaseDataAdapter.prototype.setVersion=function(a){this.cellBaseManager.setVersion(a)};
CellBaseDataAdapter.prototype.setSpecies=function(a){this.cellBaseManager.setSpecies(a)};CellBaseDataAdapter.prototype.fill=function(a,b,c,d){this.cellBaseManager.get(a,b,c,d);var e=this;this.cellBaseManager.successed.addEventListener(function(b,a){e.getFinished(a)})};CellBaseDataAdapter.prototype.getFinished=function(a){this.dataset.loadFromJSON(a);this.successed.notify()};
CellBaseDataAdapter.prototype.arrayToString=function(a,b){for(var c=new StringBuffer,d=0;d<a.length;d++)d!=a.length-1?c.append(a[d]+b):c.append(a[d]);return c.toString()};RegionCellBaseDataAdapter.prototype.setVersion=CellBaseDataAdapter.prototype.setVersion;RegionCellBaseDataAdapter.prototype.setSpecies=CellBaseDataAdapter.prototype.setSpecies;RegionCellBaseDataAdapter.prototype.toJSON=CellBaseDataAdapter.prototype.toJSON;
function RegionCellBaseDataAdapter(a,b){CellBaseDataAdapter.prototype.constructor.call(this,a);this.dataset=new FeatureDataSet;this.category="genomic";this.subcategory="region";this.resource=null;this.checkDuplicates=this.lockSuccessEventNotify=!1;this.datasets={};this.autoFill=!0;null!=b&&(null!=b.autoFill&&(this.autoFill=b.autoFill),null!=b.resource&&(this.resource=b.resource));this.preloadSuccess=new Event(this)}
RegionCellBaseDataAdapter.prototype._getHashMapKey=function(a,b,c){return a+"-"+b+"-"+c};RegionCellBaseDataAdapter.prototype.isRegionAvalaible=function(a,b,c){return null!=this.datasets[this._getHashMapKey(a,b,c)]};
RegionCellBaseDataAdapter.prototype.fill=function(a,b,c,d){var e=this;this.resource=d;if(null==a||null==b||null==c)throw"Missing value in a not optional parameter: chromosome, start or end";this.isRegionAvalaible(a,b,c)?this.lockSuccessEventNotify=!1:(this.cellBaseManager.successed=new Event(this),this.cellBaseManager.successed.addEventListener(function(d,g){e.lockSuccessEventNotify?e.anticipateRegionRetrieved(g,a,b,c):e.getFinished(g,a,b,c)}),this.cellBaseManager.get(this.category,this.subcategory,
a+":"+Math.ceil(b)+"-"+Math.ceil(c),d))};RegionCellBaseDataAdapter.prototype.getFinished=function(a,b,c,d){this.dataset.loadFromJSON(a);this.datasets[this._getHashMapKey(b,c,d)]=this.dataset;this.successed.notify()};RegionCellBaseDataAdapter.prototype.anticipateRegionRetrieved=function(a,b,c,d){this.dataset.loadFromJSON(a);this.datasets[this._getHashMapKey(b,c,d)]=a;this.lockSuccessEventNotify=!1;this.preloadSuccess.notify()};
RegionCellBaseDataAdapter.prototype.getFeaturesByPosition=function(a){var b=[],c={},d;for(d in this.datasets)for(var b=this.datasets[d].toJSON(),e=0;e<b.length;e++){var f=b[e];f.start<=a&&f.end>=a&&null==c[f.id]&&(b.push(f),c[f.id]=!0)}console.log(b.length);return b};
RegionCellBaseDataAdapter.prototype.setIntervalView=function(a,b){if(this.autoFill&&!this.lockSuccessEventNotify)for(var c in this.datasets){var d=c.split("-"),a=d[0],e=d[1],d=d[2];if(e<b&&b<d){var f=(d-e)/3;if(d-b<=f){this.lockSuccessEventNotify=!0;e=parseInt(d)+parseInt(d-e);this.fill(a,d,e,this.resource);break}if(b-e<=f){this.lockSuccessEventNotify=!0;c=parseInt(e)-parseInt(d-e);0>c&&(c=1);this.fill(a,c,e,this.resource);break}}}};GeneRegionCellBaseDataAdapter.prototype.setVersion=RegionCellBaseDataAdapter.prototype.setVersion;
GeneRegionCellBaseDataAdapter.prototype.setSpecies=RegionCellBaseDataAdapter.prototype.setSpecies;GeneRegionCellBaseDataAdapter.prototype.toJSON=RegionCellBaseDataAdapter.prototype.toJSON;GeneRegionCellBaseDataAdapter.prototype.setIntervalView=RegionCellBaseDataAdapter.prototype.setIntervalView;GeneRegionCellBaseDataAdapter.prototype.getFinished=RegionCellBaseDataAdapter.prototype.getFinished;GeneRegionCellBaseDataAdapter.prototype._getHashMapKey=RegionCellBaseDataAdapter.prototype._getHashMapKey;
GeneRegionCellBaseDataAdapter.prototype.isRegionAvalaible=RegionCellBaseDataAdapter.prototype.isRegionAvalaible;
function GeneRegionCellBaseDataAdapter(a,b){this.species=a;this.geneDataAdapter=new CellBaseManager(this.species);this.exonDataAdapter=this.transcriptDataAdapter=null;this.dataset=new FeatureDataSet;this.done=3;this.geneData=null;this.obtainTranscripts=!0;this.datasets={};this.autoFill=!0;null!=b&&(null!=b.autoFill&&(this.autoFill=b.autoFill),null!=b.obtainTranscripts&&(this.obtainTranscripts=b.obtainTranscripts));this.lockSuccessEventNotify=!1;this.preloadSuccess=new Event(this);this.successed=new Event}
GeneRegionCellBaseDataAdapter.prototype.partialRetrieveDone=function(a,b){this.done--;if("transcript"==a)for(var c=0;c<this.geneData.length;c++)this.geneData[c].transcript=[],this.geneData[c].transcript=b[c]};
GeneRegionCellBaseDataAdapter.prototype.fill=function(a,b,c){var d=this;this.chromosome=a;b=Math.ceil(b);c=Math.ceil(c);this.start=b;this.end=c;this.geneDataAdapter=new CellBaseManager(this.species);this.isRegionAvalaible(a,b,c)?this.lockSuccessEventNotify=!1:(this.geneDataAdapter.successed=new Event(this),this.geneDataAdapter.successed.addEventListener(function(e,f){d.retrievedGene(f,a,b,c)}),this.geneDataAdapter.get("genomic","region",a+":"+b+"-"+c,"gene"))};
GeneRegionCellBaseDataAdapter.prototype.retrieveExonInformation=function(a){this.exonDataAdapter=new CellBaseManager(this.species);var b=this;0==a.length?b.lockSuccessEventNotify?b.anticipateRegionRetrieved({},this.chromosome,this.start,this.end):b.getFinished({},this.chromosome,this.start,this.end):(this.exonDataAdapter.successed.addEventListener(function(a,d){for(var e=0,f=0;f<b.transcriptData.length;f++)for(var g=0;g<b.transcriptData[f].length;g++)b.transcriptData[f][g].exon=d[e],e++;for(f=0;f<
b.geneData.length;f++)b.geneData[f].transcript=b.transcriptData[f];b.lockSuccessEventNotify?b.anticipateRegionRetrieved(b.geneData,b.chromosome,b.start,b.end):b.getFinished(b.geneData,b.chromosome,b.start,b.end)}),this.exonDataAdapter.get("feature","transcript",a,"exon"))};
GeneRegionCellBaseDataAdapter.prototype.retrieveTranscriptInformation=function(a){this.transcriptDataAdapter=new CellBaseManager(this.species);var b=this;0==a.length?b.retrieveExonInformation(a):(this.transcriptDataAdapter.successed.addEventListener(function(a,d){b.transcriptData=d[0];for(var e=0;e<b.geneData.length;e++)b.geneData[e].transcript=b.transcriptData[e];for(var f="",g=0,e=0;e<b.geneData.length;e++)if(null!=b.geneData[e].transcript)for(var h=0;h<b.geneData[e].transcript.length;h++)f=f+","+
b.transcriptData[e][h].stableId,g++;f=f.substr(1,f.length);b.retrieveExonInformation(f)}),this.transcriptDataAdapter.get("feature","gene",a,"transcript"))};GeneRegionCellBaseDataAdapter.prototype.getFinished=function(a,b,c,d){this.dataset.loadFromJSON(a);this.datasets[this._getHashMapKey(b,c,d)]=this.dataset;this.successed.notify()};
GeneRegionCellBaseDataAdapter.prototype.anticipateRegionRetrieved=function(a,b,c,d){this.dataset.loadFromJSON(a);this.datasets[this._getHashMapKey(b,c,d)]=this.dataset;this.lockSuccessEventNotify=!1;this.preloadSuccess.notify()};
GeneRegionCellBaseDataAdapter.prototype.getFeaturesByPosition=function(a){var b=[],c={},d;for(d in this.datasets)for(var e=this.datasets[d].toJSON(),f=0;f<e.length;f++){var g=e[f];if(g.start<=a&&g.end>=a&&null==c[g.id]&&(b.push(g),c[g.id]=!0,g=g.transcript,null!=g))for(var h=0;h<g.length;h++){var j=g[h];if(j.start<=a&&j.end>=a&&(b.push(j),j=j.exon,null!=j))for(var k=0;k<j.length;k++){var l=j[k];l.start<=a&&l.end>=a&&b.push(l)}}}return b};
GeneRegionCellBaseDataAdapter.prototype.retrievedGene=function(a,b,c,d){this.geneData=a[0];for(var e=new String,f=0;f<a[0].length;f++)e=e+","+a[0][f].stableId;this.obtainTranscripts?this.retrieveTranscriptInformation(e.substr(1,e.length)):this.lockSuccessEventNotify?this.anticipateRegionRetrieved(a[0],b,c,d):this.getFinished(a[0],b,c,d)};KaryotypeCellBaseDataAdapter.prototype.setVersion=CellBaseDataAdapter.prototype.setVersion;KaryotypeCellBaseDataAdapter.prototype.getVersion=CellBaseDataAdapter.prototype.getVersion;
KaryotypeCellBaseDataAdapter.prototype.getSpecies=CellBaseDataAdapter.prototype.getSpecies;KaryotypeCellBaseDataAdapter.prototype.setSpecies=CellBaseDataAdapter.prototype.setSpecies;KaryotypeCellBaseDataAdapter.prototype.getFinished=CellBaseDataAdapter.prototype.getFinished;KaryotypeCellBaseDataAdapter.prototype.toJSON=CellBaseDataAdapter.prototype.toJSON;
function KaryotypeCellBaseDataAdapter(a){CellBaseDataAdapter.prototype.constructor.call(this,a);this.species=a;this.category="feature";this.subcategory="karyotype";this.resource="chromosome";this.chromosomeNames=null}KaryotypeCellBaseDataAdapter.prototype.fill=function(){var a=this,b=new CellBaseDataAdapter(this.species);b.successed.addEventListener(function(){a.getCytobandsByChromosome(b.dataset.json)});b.fill("feature","karyotype","none","chromosome")};
KaryotypeCellBaseDataAdapter.prototype.sortfunction=function(a,b){var c=!0,d;for(i=0;i<a.length&&!0==c;i++)d=a.charAt(i),-1=="0123456789.".indexOf(d)&&(c=!1);return!c?1:a-b};KaryotypeCellBaseDataAdapter.prototype.IsNumeric=function(a){var b=!0,c;for(i=0;i<a.length&&!0==b;i++)c=a.charAt(i),-1=="0123456789.".indexOf(c)&&(b=!1);return b};
KaryotypeCellBaseDataAdapter.prototype.getCytobandsByChromosome=function(a){var b=this,c=new CellBaseManager(this.species);c.successed.addEventListener(function(a,c){b.getFinished(c)});a.sort(this.sortfunction);this.chromosomeNames=a;c.get("feature","karyotype",a.toString(),"cytoband")};XrefFeatureListCellBaseDataAdapter.prototype.setVersion=CellBaseDataAdapter.prototype.setVersion;XrefFeatureListCellBaseDataAdapter.prototype.setSpecies=CellBaseDataAdapter.prototype.setSpecies;
XrefFeatureListCellBaseDataAdapter.prototype.getVersion=CellBaseDataAdapter.prototype.getVersion;XrefFeatureListCellBaseDataAdapter.prototype.getSpecies=CellBaseDataAdapter.prototype.getSpecies;XrefFeatureListCellBaseDataAdapter.prototype.getFinished=CellBaseDataAdapter.prototype.getFinished;XrefFeatureListCellBaseDataAdapter.prototype.arrayToString=CellBaseDataAdapter.prototype.arrayToString;XrefFeatureListCellBaseDataAdapter.prototype.toJSON=CellBaseDataAdapter.prototype.toJSON;
function XrefFeatureListCellBaseDataAdapter(a){CellBaseDataAdapter.prototype.constructor.call(this,a);this.category="feature";this.subcategory="id";this.resource="xref?dbname=";this.databases="go_cellular_component,go_molecular_function,go_biological_process,kegg,reactome,ensembl_gene,interpro,uniprot_swissprot_accession,jaspar".split(",")}
XrefFeatureListCellBaseDataAdapter.prototype.fill=function(a,b){this.resource+=this.arrayToString(this.databases,",");null!=b&&(a+="&identifier="+b);this.cellBaseManager.get(this.category,this.subcategory,a,this.resource);var c=this;this.cellBaseManager.successed.addEventListener(function(b,a){c.getFinished(a)})};
function InfoWidget(a,b,c){this.id="InfoWidget_"+Math.round(1E7*Math.random());this.targetId=null;this.species=b;this.featureId=this.title=null;this.width=800;this.height=400;null!=a&&(this.targetId=a);null!=c&&(null!=c.title&&(this.title=c.title),null!=c.width&&(this.width=c.width),null!=c.height&&(this.height=c.height));switch(b){case "hsa":this.ensemblSpecie="Homo_sapiens";this.reactomeSpecie="48887";this.wikipathwaysSpecie="Homo+sapiens";this.haphapSpecie=this.dbsnpSpecie=this.intactSpecie=this.uniprotSpecie=
this.omimSpecie="";break;case "mmu":this.ensemblSpecies="Mus_musculus";this.reactomeSpecies="48892";this.wikipathwaysSpecie="Mus+musculus";this.haphapSpecie=this.dbsnpSpecie=this.intactSpecie=this.uniprotSpecie=this.omimSpecie="";break;case "dre":this.ensemblSpecie="Danio_rerio",this.reactomeSpecie="68323",this.wikipathwaysSpecie="Danio+rerio",this.haphapSpecie=this.dbsnpSpecie=this.intactSpecie=this.uniprotSpecie=this.omimSpecie=""}}
InfoWidget.prototype.draw=function(a){this.feature=a;console.log(a.getName());this.panel=Ext.getCmp(this.title+" "+this.feature.getName());null==this.panel?(this.render(),this.panel.show(),this.getData()):this.panel.show()};
InfoWidget.prototype.render=function(){this.panel=Ext.create("Ext.ux.Window",{title:this.title+" "+this.feature.getName(),id:this.title+" "+this.feature.getName(),resizable:!1,minimizable:!0,constrain:!0,closable:!0,height:this.height,width:this.width,layout:{type:"hbox",align:"stretch"},items:[this.getTreePanel()],buttonAlign:"right",listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}})};
InfoWidget.prototype.getTreePanel=function(){var a=this.getdataTypes();this.checkDataTypes(a);a=Ext.create("Ext.data.TreeStore",{root:{expanded:!0,text:"Options",children:a}});return Ext.create("Ext.tree.Panel",{title:"Detailed information",bodyPadding:10,flex:1,border:!1,store:a,useArrows:!0,rootVisible:!1,listeners:{scope:this,itemclick:function(b,a){this.optionClick(a.data)}}})};
InfoWidget.prototype.doGrid=function(a,b,c,d){for(var e=Ext.create("Ext.grid.feature.Grouping",{groupHeaderTpl:d+' ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})'}),f=[],g=0;g<b.length;g++)f.push({type:"string",dataIndex:b[g]});f={ftype:"filters",local:!0,filters:f};Ext.define(c,{extend:"Ext.data.Model",fields:b});b=Ext.create("Ext.data.Store",{groupField:d,model:c});return Ext.create("Ext.grid.Panel",{id:this.id+c,store:b,title:c,border:!1,cls:"panel-border-left",flex:3,features:[e,f],
columns:a,bbar:["->",{text:"Clear Grouping",handler:function(){e.disable()}}]})};InfoWidget.prototype.checkDataTypes=function(a){for(var b=0;b<a.length;b++)null!=a[b].children?(a[b].iconCls="icon-box",a[b].expanded=!0,this.checkDataTypes(a[b].children)):(a[b].iconCls="icon-blue-box",a[b].leaf=!0)};InfoWidget.prototype.getdataTypes=function(){return[]};InfoWidget.prototype.optionClick=function(){};InfoWidget.prototype.getData=function(){};
InfoWidget.prototype.getGeneTemplate=function(){return new Ext.XTemplate('<p><span class="panel-border-bottom"><span class="ssel s130">{externalName}</span> &nbsp; <span class="emph s120"> {stableId} </span></span>',' &nbsp; <a target="_blank" href="http://www.ensembl.org/Multi/Search/Results?species='+this.ensemblSpecie+';idx=;q={stableId}">Ensembl</a>',"</p><br>",'<p><span class="w75 dis s90">Location: </span> <span class="">{chromosome}:{start}-{end} </span><span style="margin-left:50px" class=" dis s90">Strand: </span> {strand}</p>',
'<p><span class="w75 dis s90">Biotype: </span> {biotype}</p>','<p><span class="w75 dis s90">Description: </span> <span><tpl if="description == &quot;&quot;">No description available</tpl>{description}</span></p>',"<br>",'<p><span class="w75 dis s90">Source: </span> <span class="s110">{source}</span></p>','<p><span class="w75 dis s90">External DB: </span> {externalDb}</p>','<p><span class="w75 dis s90">Status: </span> {status}</p>')};
InfoWidget.prototype.getTranscriptTemplate=function(){return new Ext.XTemplate('<p><span class="panel-border-bottom"><span class="ssel s130">{externalName}</span> &nbsp; <span class="emph s120"> {stableId} </span></span></p><br>','<p><span class="w100 dis s90">Location: </span> <span class="">{chromosome}:{start}-{end} </span><span style="margin-left:50px" class=" dis s90">Strand: </span> {strand}</p>','<p><span class="w100 dis s90">Biotype: </span> {biotype}</p>','<p><span class="w100 dis s90">Description: </span> <span><tpl if="description == &quot;&quot;">No description available</tpl>{description}</span></p>',
"<br>",'<p><span class="w100 dis s90">CDS &nbsp; (start-end): </span> {codingRegionStart}-{codingRegionEnd} <span style="margin-left:50px" class="w100 dis s90">CDNA (start-end): </span> {cdnaCodingStart}-{cdnaCodingEnd}</p>',"<br>",'<p><span class="w100 dis s90">External DB: </span> {externalDb}</p>','<p><span class="w100 dis s90">Status: </span> {status}</p><br>')};
InfoWidget.prototype.getSnpTemplate=function(){return new Ext.XTemplate('<p><span class="panel-border-bottom"><span class="ssel s130">{name}</span></span></p><br>','<p><span class="w140 dis s90">Location: </span> <span class="">{chromosome}:{start}-{end} </span><span style="margin-left:50px" class=" dis s90">Strand: </span> {strand}</p>','<p><span class="w140 dis s90">Source: </span> <span class="s110">{source}</span></p>',"<br>",'<p><span class="w140 dis s90">Map weight: </span> {mapWeight}</p>',
'<p><span class="w140 dis s90">Allele string: </span> {alleleString}</p>','<p><span class="w140 dis s90">Ancestral allele: </span> {ancestralAllele}</p>','<p><span class="w140 dis s90">Display So consequence: </span> {displaySoConsequence}</p>','<p><span class="w140 dis s90">So consequence type: </span> {soConsequenceType}</p>','<p><span class="w140 dis s90">Display consequence: </span> {displayConsequence}</p>','<p><span class="w140 dis s90">Sequence: </span> {sequence}</p>')};
InfoWidget.prototype.getExonTemplate=function(){return new Ext.XTemplate('<span><span class="panel-border-bottom"><span class="ssel s110">{stableId}</span></span></span>','<span><span style="margin-left:30px" class="dis s90"> Location: </span> <span class="">{chromosome}:{start}-{end} </span></span>','<span><span style="margin-left:30px" class="dis s90"> Strand: </span> {strand}</span>')};
InfoWidget.prototype.getVCFVariantTemplate=function(){return new Ext.XTemplate('<p><span><span class="panel-border-bottom"><span class="ssel s130">{chromosome}:{start}-{alt}</span> &nbsp; <span class="emph s120"> {label} </span></span></span></p><br>','<p><span class="w75 dis s90">Alt: </span> {alt}</p>','<p><span class="w75 dis s90">Ref: </span> {ref}</p>','<p><span class="w75 dis s90">Quality: </span> {quality}</p>','<p><span class="w75 dis s90">Format: </span> {format}</p>','<p><span class="w75 dis s90">Samples: </span> {samples}</p>',
'<p><span class="w75 dis s90">Info: </span> {info}</p>')};GeneInfoWidget.prototype.draw=InfoWidget.prototype.draw;GeneInfoWidget.prototype.render=InfoWidget.prototype.render;GeneInfoWidget.prototype.getTreePanel=InfoWidget.prototype.getTreePanel;GeneInfoWidget.prototype.checkDataTypes=InfoWidget.prototype.checkDataTypes;GeneInfoWidget.prototype.doGrid=InfoWidget.prototype.doGrid;GeneInfoWidget.prototype.getGeneTemplate=InfoWidget.prototype.getGeneTemplate;
GeneInfoWidget.prototype.getTranscriptTemplate=InfoWidget.prototype.getTranscriptTemplate;function GeneInfoWidget(a,b,c){null==c&&(c={});c.title="Gene Info";InfoWidget.prototype.constructor.call(this,a,b,c)}GeneInfoWidget.prototype.getdataTypes=function(){return dataTypes=[{text:"Genomic",children:[{text:"Information"},{text:"Transcripts"}]},{text:"Functional information",children:[{text:"GO"},{text:"Reactome"},{text:"Interpro"}]},{text:"Regulatory",children:[{text:"Jaspar"},{text:"miRNA"}]},{text:"3D protein"}]};
GeneInfoWidget.prototype.optionClick=function(a){if(a.leaf)switch(null!=this.panel.getComponent(1)&&(this.panel.getComponent(1).hide(),this.panel.remove(1,!1)),a.text){case "Information":this.panel.add(this.getInfoPanel(this.data).show());break;case "Transcripts":this.panel.add(this.getTranscriptGrid(this.data.transcripts).show());break;case "GO":this.panel.add(this.getXrefGrid(this.data.go,"GO").show());break;case "Interpro":this.panel.add(this.getXrefGrid(this.data.interpro,"Interpro").show());
break;case "Reactome":this.panel.add(this.getXrefGrid(this.data.reactome,"Reactome").show());break;case "3D protein":this.panel.add(this.get3Dprotein(this.data.snps).show())}};GeneInfoWidget.prototype.getInfoPanel=function(a){if(null==this.infoPanel){var b=this.getGeneTemplate();this.infoPanel=Ext.create("Ext.panel.Panel",{title:"Information",border:!1,cls:"panel-border-left",flex:3,bodyPadding:10,data:a,tpl:b})}return this.infoPanel};
GeneInfoWidget.prototype.getTranscriptGrid=function(a){if(null==this.transcriptGrid){for(var b=this.getTranscriptTemplate(),c=[],d=0;d<a.length;d++){var e=Ext.create("Ext.panel.Panel",{border:!1,bodyPadding:5,data:a[d],tpl:b});c.push(e)}this.transcriptGrid=Ext.create("Ext.panel.Panel",{title:"Transcripts ("+d+")",border:!1,cls:"panel-border-left",flex:3,bodyPadding:5,autoScroll:!0,items:c})}return this.transcriptGrid};
GeneInfoWidget.prototype.getXrefGrid=function(a,b){null==this[b+"Grid"]&&(this[b+"Grid"]=this.doGrid([{header:"Display Id",dataIndex:"displayId",flex:1},{header:"Description",dataIndex:"description",flex:3}],["description","displayId"],b,""),this[b+"Grid"].store.loadData(a));return this[b+"Grid"]};
GeneInfoWidget.prototype.getGoGrid=function(){var a=this;null==this.goGrid&&(this.goGrid=this.doGrid([{header:"Database id",dataIndex:"id",flex:2},{header:"Name",dataIndex:"name",flex:1},{header:"Description",dataIndex:"description",flex:2},{xtype:"actioncolumn",header:"+info",flex:1,items:[{iconCls:"icon-blue-box",tooltip:"+info",handler:function(b,c){var d=a.goStore.getAt(c);Ext.Msg.alert(d.get("name"),d.get("description"))}}]},{header:"Direct genes",dataIndex:"directNumberOfGenes",flex:2},{header:"Level",
dataIndex:"level",flex:1},{header:"Namespace",dataIndex:"namespace",flex:2},{header:"Propagated genes",dataIndex:"propagatedNumberOfGenes",flex:2.5}],"id,name,description,level,directNumberOfGenes,namespace,parents,propagatedNumberOfGenes,score".split(","),"GO","namespace"));return this.goGrid};
GeneInfoWidget.prototype.get3Dprotein=function(){var a=this;if(null==this.p3dProtein){this.p3dProtein=Ext.create("Ext.tab.Panel",{title:"3D Protein Viewer",border:!1,cls:"panel-border-left",flex:3,autoScroll:!0});var b=[];$.ajax({url:"http://ws.bioinfo.cipf.es/celldb/rest/v1/hsa/feature/id/"+this.feature.feature.stableId+"/xref?dbname=pdb",async:!1,success:function(c){if(""!=c){b=c.trim().split("\n");for(c=0;c<b.length;c++){var d=b[c].trim(),d=Ext.create("Ext.panel.Panel",{title:d,bodyCls:"background-black",
html:'<canvas class="ChemDoodleWebComponent" id="pdb_canvas_'+d+'" width="600" height="600" style="width: 600px; height: 600px; ">This browser does not support HTML5/Canvas.</canvas>',listeners:{afterrender:function(b){b=b.title;ChemDoodle.default_backgroundColor="#000000";var a=new ChemDoodle.TransformCanvas3D("pdb_canvas_"+b,300,300);a.gl?(a.specs.set3DRepresentation("Ball and Stick"),a.specs.proteins_ribbonCartoonize=!0,a.handle=null,a.timeout=15,a.startAnimation=ChemDoodle._AnimatorCanvas.prototype.startAnimation,
a.stopAnimation=ChemDoodle._AnimatorCanvas.prototype.stopAnimation,a.isRunning=ChemDoodle._AnimatorCanvas.prototype.isRunning,a.dblclick=ChemDoodle.RotatorCanvas.prototype.dblclick,a.nextFrame=function(b){var a=[];mat4.identity(a);var b=b/1E3,c=Math.PI/15;mat4.rotate(a,c*b,[1,0,0]);mat4.rotate(a,c*b,[0,1,0]);mat4.rotate(a,c*b,[0,0,1]);mat4.multiply(this.rotationMatrix,a)},$.get("http://www.rcsb.org/pdb/files/"+b+".pdb",function(b){b=ChemDoodle.readPDB(b);a.loadMolecule(b);a.startAnimation()})):(a.emptyMessage=
"Your browser does not support WebGL",a.displayMessage())}}});a.p3dProtein.add(d)}}else a.p3dProtein.setTitle("No proteins found")}})}return this.p3dProtein};GeneInfoWidget.prototype.getEnsembleId=function(){};
GeneInfoWidget.prototype.getData=function(){var a=this;this.panel.disable();this.panel.setLoading("Getting information...");var b=new CellBaseDataAdapter(this.species);b.successed.addEventListener(function(){a.dataReceived(JSON.parse(b.toJSON()))});b.fill("feature","gene",this.feature.feature.stableId,"fullinfo")};GeneInfoWidget.prototype.dataReceived=function(a){this.data=a[0];this.optionClick({text:"Information",leaf:"true"});this.panel.enable();this.panel.setLoading(!1)};
ProteinInfoWidget.prototype.draw=InfoWidget.prototype.draw;ProteinInfoWidget.prototype.render=InfoWidget.prototype.render;ProteinInfoWidget.prototype.getTreePanel=InfoWidget.prototype.getTreePanel;ProteinInfoWidget.prototype.checkDataTypes=InfoWidget.prototype.checkDataTypes;ProteinInfoWidget.prototype.doGrid=InfoWidget.prototype.doGrid;function ProteinInfoWidget(a,b,c){null==c&&(c={});c.title="Protein Info";InfoWidget.prototype.constructor.call(this,a,b,c)}
ProteinInfoWidget.prototype.getdataTypes=function(){return dataTypes=[{text:"Sumary",children:[{text:"Long"},{text:"Seq"}]},{text:"Functional information",children:[{text:"GO"},{text:"Reactome"},{text:"Interpro"}]},{text:"Interactions"},{text:"Variations"}]};ProteinInfoWidget.prototype.optionClick=function(a){a.leaf&&null!=this.panel.getComponent(1)&&(this.panel.getComponent(1).hide(),this.panel.remove(1,!1))};SnpInfoWidget.prototype.draw=InfoWidget.prototype.draw;SnpInfoWidget.prototype.render=InfoWidget.prototype.render;
SnpInfoWidget.prototype.getTreePanel=InfoWidget.prototype.getTreePanel;SnpInfoWidget.prototype.checkDataTypes=InfoWidget.prototype.checkDataTypes;SnpInfoWidget.prototype.doGrid=InfoWidget.prototype.doGrid;SnpInfoWidget.prototype.getSnpTemplate=InfoWidget.prototype.getSnpTemplate;function SnpInfoWidget(a,b,c){null==c&&(c={});c.title="SNP Info";InfoWidget.prototype.constructor.call(this,a,b,c)}
SnpInfoWidget.prototype.getdataTypes=function(){return dataTypes=[{text:"Genomic",children:[{text:"Information"},{text:"Gene"}]},{text:"Consequence Type"},{text:"Population"}]};SnpInfoWidget.prototype.optionClick=function(a){if(a.leaf)switch(null!=this.panel.getComponent(1)&&(this.panel.getComponent(1).hide(),this.panel.remove(1,!1)),a.text){case "Information":this.panel.add(this.getInfoPanel(this.data).show())}};
SnpInfoWidget.prototype.getInfoPanel=function(a){if(null==this.infoPanel){var b=this.getSnpTemplate();this.infoPanel=Ext.create("Ext.panel.Panel",{title:"Information",border:!1,cls:"panel-border-left",flex:3,bodyPadding:10,data:a,tpl:b})}return this.infoPanel};
SnpInfoWidget.prototype.getData=function(){var a=this;this.panel.disable();this.panel.setLoading("Getting information...");var b=new CellBaseDataAdapter(this.species);b.successed.addEventListener(function(){a.dataReceived(JSON.parse(b.toJSON()))});b.fill("feature","snp",this.feature.getName(),"fullinfo")};
SnpInfoWidget.prototype.dataReceived=function(a){for(var a=a[0],b=0;b<a.length;b++)a[b].chromosome==this.feature.feature.chromosome&&a[b].start==this.feature.start&&a[b].end==this.feature.end&&(this.data=a[b],console.log(a[b]));this.optionClick({text:"Information",leaf:"true"});this.panel.enable();this.panel.setLoading(!1)};TranscriptInfoWidget.prototype.draw=InfoWidget.prototype.draw;TranscriptInfoWidget.prototype.render=InfoWidget.prototype.render;TranscriptInfoWidget.prototype.getTreePanel=InfoWidget.prototype.getTreePanel;
TranscriptInfoWidget.prototype.checkDataTypes=InfoWidget.prototype.checkDataTypes;TranscriptInfoWidget.prototype.doGrid=InfoWidget.prototype.doGrid;TranscriptInfoWidget.prototype.getGeneTemplate=InfoWidget.prototype.getGeneTemplate;TranscriptInfoWidget.prototype.getTranscriptTemplate=InfoWidget.prototype.getTranscriptTemplate;TranscriptInfoWidget.prototype.getExonTemplate=InfoWidget.prototype.getExonTemplate;
function TranscriptInfoWidget(a,b,c){null==c&&(c={});c.title="Transcript";InfoWidget.prototype.constructor.call(this,a,b,c)}TranscriptInfoWidget.prototype.getdataTypes=function(){return dataTypes=[{text:"Genomic",children:[{text:"Information"},{text:"Gene"},{text:"Exons"}]},{text:"Functional information",children:[{text:"GO"},{text:"Interpro"},{text:"Reactome"}]},{text:"Variation",children:[{text:"SNPs"},{text:"Mutations"}]},{text:"Regulatory",children:[]},{text:"3D protein"}]};
TranscriptInfoWidget.prototype.optionClick=function(a){if(a.leaf)switch(null!=this.panel.getComponent(1)&&(this.panel.getComponent(1).hide(),this.panel.remove(1,!1)),a.text){case "Information":this.panel.add(this.getInfoPanel(this.data).show());break;case "Gene":this.panel.add(this.getGenePanel(this.data.gene).show());break;case "Exons":this.panel.add(this.getExonsGrid(this.data.exons).show());break;case "GO":this.panel.add(this.getXrefGrid(this.data.go,"GO").show());break;case "Interpro":this.panel.add(this.getXrefGrid(this.data.interpro,
"Interpro").show());break;case "Reactome":this.panel.add(this.getXrefGrid(this.data.reactome,"Reactome").show());break;case "SNPs":this.panel.add(this.getSnpsGrid(this.data.snps).show());break;case "3D protein":this.panel.add(this.get3Dprotein(this.data.snps).show())}};
TranscriptInfoWidget.prototype.getInfoPanel=function(a){if(null==this.infoPanel){var b=this.getTranscriptTemplate();this.infoPanel=Ext.create("Ext.panel.Panel",{title:"Information",border:!1,cls:"panel-border-left",flex:3,bodyPadding:10,autoScroll:!0,data:a,tpl:b})}return this.infoPanel};
TranscriptInfoWidget.prototype.getGenePanel=function(a){if(null==this.genePanel){var b=this.getGeneTemplate();this.genePanel=Ext.create("Ext.panel.Panel",{title:"Gene",border:!1,cls:"panel-border-left",flex:3,bodyPadding:10,data:a,tpl:b})}return this.genePanel};
TranscriptInfoWidget.prototype.getExonsGrid=function(a){if(null==this.exonsGrid){for(var b=this.getExonTemplate(),c=[],d=0;d<a.length;d++){var e=Ext.create("Ext.panel.Panel",{border:!1,bodyPadding:5,data:a[d],tpl:b});c.push(e)}this.exonsGrid=Ext.create("Ext.panel.Panel",{title:"Exons ("+d+")",border:!1,cls:"panel-border-left",flex:3,bodyPadding:5,autoScroll:!0,items:c})}return this.exonsGrid};
TranscriptInfoWidget.prototype.getXrefGrid=function(a,b){null==this[b+"Grid"]&&(this[b+"Grid"]=this.doGrid([{header:"Display Id",dataIndex:"displayId",flex:1},{header:"Description",dataIndex:"description",flex:3}],["description","displayId"],b,""),this[b+"Grid"].store.loadData(a));return this[b+"Grid"]};
TranscriptInfoWidget.prototype.getSnpsGrid=function(a){null==this.snpsGrid&&(this.snpsGrid=this.doGrid([{header:"Name",dataIndex:"name",flex:2},{header:"Location",xtype:"templatecolumn",tpl:"{chromosome}:{start}-{end}",flex:2},{header:"Strand",dataIndex:"strand",flex:0.7},{header:"Sequence",dataIndex:"sequence",flex:2}],"chromosome,start,end,name,strand,sequence".split(","),"SNPs",""),this.snpsGrid.store.loadData(a));return this.snpsGrid};
TranscriptInfoWidget.prototype.get3Dprotein=function(){var a=this;if(null==this.p3dProtein){this.p3dProtein=Ext.create("Ext.tab.Panel",{title:"3D Protein Viewer",border:!1,cls:"panel-border-left",flex:3,autoScroll:!0});var b=[];$.ajax({url:"http://ws.bioinfo.cipf.es/celldb/rest/v1/hsa/feature/id/"+this.feature.feature.stableId+"/xref?dbname=pdb",async:!1,success:function(c){if(""!=c){b=c.trim().split("\n");for(c=0;c<b.length;c++){var d=b[c].trim(),d=Ext.create("Ext.panel.Panel",{title:d,bodyCls:"background-black",
html:'<canvas class="ChemDoodleWebComponent" id="pdb_canvas_'+d+'" width="600" height="600" style="width: 600px; height: 600px; ">This browser does not support HTML5/Canvas.</canvas>',listeners:{afterrender:function(b){b=b.title;ChemDoodle.default_backgroundColor="#000000";var a=new ChemDoodle.TransformCanvas3D("pdb_canvas_"+b,300,300);a.gl?(a.specs.set3DRepresentation("Ball and Stick"),a.specs.proteins_ribbonCartoonize=!0,a.handle=null,a.timeout=15,a.startAnimation=ChemDoodle._AnimatorCanvas.prototype.startAnimation,
a.stopAnimation=ChemDoodle._AnimatorCanvas.prototype.stopAnimation,a.isRunning=ChemDoodle._AnimatorCanvas.prototype.isRunning,a.dblclick=ChemDoodle.RotatorCanvas.prototype.dblclick,a.nextFrame=function(b){var a=[];mat4.identity(a);var b=b/1E3,c=Math.PI/15;mat4.rotate(a,c*b,[1,0,0]);mat4.rotate(a,c*b,[0,1,0]);mat4.rotate(a,c*b,[0,0,1]);mat4.multiply(this.rotationMatrix,a)},$.get("http://www.rcsb.org/pdb/files/"+b+".pdb",function(b){b=ChemDoodle.readPDB(b);a.loadMolecule(b);a.startAnimation()})):(a.emptyMessage=
"Your browser does not support WebGL",a.displayMessage())}}});a.p3dProtein.add(d)}}else a.p3dProtein.setTitle("No proteins found")}})}return this.p3dProtein};TranscriptInfoWidget.prototype.getData=function(){var a=this;this.panel.disable();this.panel.setLoading("Getting information...");var b=new CellBaseDataAdapter(this.species);b.successed.addEventListener(function(){a.dataReceived(JSON.parse(b.toJSON()))});b.fill("feature","transcript",this.feature.feature.stableId,"fullinfo")};
TranscriptInfoWidget.prototype.dataReceived=function(a){this.data=a[0];this.optionClick({text:"Information",leaf:"true"});this.panel.enable();this.panel.setLoading(!1)};VCFVariantInfoWidget.prototype.draw=InfoWidget.prototype.draw;VCFVariantInfoWidget.prototype.render=InfoWidget.prototype.render;VCFVariantInfoWidget.prototype.getTreePanel=InfoWidget.prototype.getTreePanel;VCFVariantInfoWidget.prototype.checkDataTypes=InfoWidget.prototype.checkDataTypes;VCFVariantInfoWidget.prototype.doGrid=InfoWidget.prototype.doGrid;
VCFVariantInfoWidget.prototype.getVCFVariantTemplate=InfoWidget.prototype.getVCFVariantTemplate;function VCFVariantInfoWidget(a,b,c){null==c&&(c={});c.title="VCF variant Info";InfoWidget.prototype.constructor.call(this,a,b,c)}VCFVariantInfoWidget.prototype.getdataTypes=function(){return dataTypes=[{text:"Genomic",children:[{text:"Information"}]}]};
VCFVariantInfoWidget.prototype.optionClick=function(a){if(a.leaf)switch(null!=this.panel.getComponent(1)&&(this.panel.getComponent(1).hide(),this.panel.remove(1,!1)),a.text){case "Information":this.panel.add(this.getInfoPanel(this.data).show())}};VCFVariantInfoWidget.prototype.getInfoPanel=function(a){if(null==this.infoPanel){var b=this.getVCFVariantTemplate();this.infoPanel=Ext.create("Ext.panel.Panel",{title:"Information",border:!1,cls:"panel-border-left",flex:3,bodyPadding:10,data:a,tpl:b})}return this.infoPanel};
VCFVariantInfoWidget.prototype.getData=function(){this.panel.disable();this.panel.setLoading("Getting information...");this.dataReceived(this.feature)};VCFVariantInfoWidget.prototype.dataReceived=function(a){this.data=a.feature;this.optionClick({text:"Information",leaf:"true"});this.panel.enable();this.panel.setLoading(!1)};
function CellBaseManager(a){this.host="http://ws.bioinfo.cipf.es/cellbase/rest";this.version="v1";this.species=a;CELLBASEHOST=this.host;this.subcategory=this.category=null;this.contentformat="jsonp";this.fileformat="";this.outputcompress=!1;this.dataType="script";this.resource=this.query="";this.async=!0;this.maxQuery=20;this.numberQueries=0;this.results=[];this.resultsCount=[];this.batching=!1;this.completed=new Event;this.successed=new Event;this.batchSuccessed=new Event;this.error=new Event;this.setVersion=
function(b){this.version=b};this.setSpecies=function(b){this.species=b};this.getVersion=function(){return this.version};this.getSpecies=function(){return this.species};this.setAsync=function(b){this.async=b};this.getUrl=function(){return null!=this.query?this.host+"/"+this.version+"/"+this.species+"/"+this.category+"/"+this.subcategory+"/"+this.query+"/"+this.resource:this.host+"/"+this.version+"/"+this.species+"/"+this.category+"/"+this.subcategory+"/"+this.resource};this.get=function(b,a,d,e,f){if(d instanceof
Array)this.batching=!0,this.results=[],this.getMultiple(b,a,d,e);else{var d=new String(d),d=d.replace(/\s/g,""),g=d.split(",");this.maxQuery<g.length?(this.batching=!0,this.getMultiple(b,a,g,e,f)):(this.batching=!1,this.getSingle(b,a,d,e,f))}};this._joinToResults=function(b){this.resultsCount.push(!0);this.results[b.id]=b.data;if(this.numberQueries==this.resultsCount.length){for(var b=[],a=0;a<this.results.length;a++)for(var d=0;d<this.results[a].length;d++)b.push(this.results[a][d]);this.successed.notify(b)}};
this.getSingle=function(a,c,d,e,f,g){this.category=a;this.subcategory=c;this.query=d;this.resource=e;this._callServer(this.getUrl(),f,g)};this.getMultiple=function(a,c,d,e){var f=[];if(d.length>this.maxQuery)for(var g=0;g<d.length;g+=this.maxQuery)f.push(d.slice(g,g+this.maxQuery));this.numberQueries=f.length;var h=this;this.batchSuccessed.addEventListener(function(a,b){h._joinToResults(b)});for(g=0;g<f.length;g++)this.results.push([]),this.getSingle(a,c,f[g].toString(),e,g)};this._callServer=function(a,
c,d){var e=this;$.ajax({url:a,type:"GET",async:this.async,data:{of:this.contentformat,outputcompress:this.outputcompress,callbackParam:"response"},dataType:this.dataType,jsonp:"callback",success:function(){"undefined"!=typeof response?(null!=d&&d(response),e.batching?e.batchSuccessed.notify({data:response,id:c}):e.successed.notify(response)):e.error.notify()},complete:function(){e.completed.notify()},error:function(){e.error.notify()}})}};
