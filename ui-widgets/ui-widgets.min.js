ExpressionGenomicAttributesWidget.prototype.draw=GenomicAttributesWidget.prototype.draw;ExpressionGenomicAttributesWidget.prototype.getMainPanel=GenomicAttributesWidget.prototype.getMainPanel;ExpressionGenomicAttributesWidget.prototype.render=GenomicAttributesWidget.prototype.render;ExpressionGenomicAttributesWidget.prototype.drawKaryotype=GenomicAttributesWidget.prototype.drawKaryotype;ExpressionGenomicAttributesWidget.prototype.makeGrid=GenomicAttributesWidget.prototype.makeGrid;
ExpressionGenomicAttributesWidget.prototype.getKaryotypePanelId=GenomicAttributesWidget.prototype.getKaryotypePanelId;ExpressionGenomicAttributesWidget.prototype.onAdditionalInformationClick=GenomicAttributesWidget.prototype.onAdditionalInformationClick;
function ExpressionGenomicAttributesWidget(a,b){null==b&&(b={});b.columnsCount=2;b.title="Expression";b.tags=["expression"];b.featureType="gene";b.listWidgetArgs={title:"Filter",action:"filter"};GenomicAttributesWidget.prototype.constructor.call(this,a,b)}
ExpressionGenomicAttributesWidget.prototype.fill=function(a){for(var b=this,c=Normalizer.normalizeArray(values),e=[],d=0;d<c.length;d++)isNaN(parseFloat(values[d]))?e.push("#000000"):e.push(Colors.getColorByScoreValue(c[d]).HexString());var f=new CellBaseDataAdapter(this.species);f.successed.addEventListener(function(){b.karyotypePanel.setLoading("Retrieving data");for(var c=0;c<f.dataset.toJSON().length;c++)b.karyotypeWidget.mark(f.dataset.toJSON()[c],e[c]);b.query={dataset:f.dataset,resource:a};
b.features=f.dataset.toJSON();b.karyotypePanel.setLoading(!1);b.filtersButton.enable();b.addTrackButton.enable()});f.fill("feature","gene",a.toString(),"info")};ExpressionGenomicAttributesWidget.prototype.dataChange=function(a){try{this.karyotypePanel.setLoading("Connecting to Database");this.karyotypeWidget.unmark();var b=[];values=[];for(var c=0;c<a.length;c++)b.push(a[c].data[0]),values.push(a[c].data[1]);0<a.length&&this.fill(b,values)}catch(e){alert(e),this.panel.setLoading(!1)}};
ExpressionNetworkAttributesWidget.prototype.draw=NetworkAttributesWidget.prototype.draw;ExpressionNetworkAttributesWidget.prototype.render=NetworkAttributesWidget.prototype.render;ExpressionNetworkAttributesWidget.prototype.render=NetworkAttributesWidget.prototype.render;ExpressionNetworkAttributesWidget.prototype.makeGrid=NetworkAttributesWidget.prototype.makeGrid;ExpressionNetworkAttributesWidget.prototype.getDetailPanel=NetworkAttributesWidget.prototype.getDetailPanel;
ExpressionNetworkAttributesWidget.prototype.getNetworkPanelId=NetworkAttributesWidget.prototype.getNetworkPanelId;ExpressionNetworkAttributesWidget.prototype.drawNetwork=NetworkAttributesWidget.prototype.drawNetwork;ExpressionNetworkAttributesWidget.prototype.dataChanged=NetworkAttributesWidget.prototype.dataChanged;ExpressionNetworkAttributesWidget.prototype.getFoundVertices=NetworkAttributesWidget.prototype.getFoundVertices;ExpressionNetworkAttributesWidget.prototype.getVertexAttributesByName=NetworkAttributesWidget.prototype.getVertexAttributesByName;
function ExpressionNetworkAttributesWidget(a){null==a&&(a={});this.id="ExpressionNetworkAttributes_"+Math.random();a.columnsCount=2;a.title="Expression";a.tags=["expression"];NetworkAttributesWidget.prototype.constructor.call(this,a);this.applyColors=new Event}
ExpressionNetworkAttributesWidget.prototype.getButtons=function(){var a=this;this.rescaleCheckBox=Ext.create("Ext.form.field.Checkbox",{boxLabel:"Rescale",padding:"0 0 5 5",disabled:!0,listeners:{scope:this,change:function(){a.onDataChanged(a.attributesPanel.grid.store.getRange())}}});this.attributesPanel.barInfo.insert(0,this.rescaleCheckBox);this.attributesPanel.onFileRead.addEventListener(function(){a.rescaleCheckBox.enable()});return[{text:"Apply Colors",handler:function(){a.applyColors.notify();
a.panel.close()}},{text:"Close",handler:function(){a.panel.close()}}]};
ExpressionNetworkAttributesWidget.prototype.onDataChanged=function(a){var b=this.rescaleCheckBox.getValue();this.verticesSelected.notify(this.getFoundVertices());this.networkWidget.deselectNodes();this.networkWidget.selectVerticesByName(this.getFoundVertices());for(var c=[],e=[],d=0;d<a.length;d++){var f=this.graphDataset.getVertexByName(a[d].data["0"]),g=a[d].data["1"];null!=f&&!isNaN(parseFloat(g))&&(b&&(g=0>parseFloat(g)?-1*(Math.log(Math.abs(g))/Math.log(2)):Math.log(Math.abs(g))/Math.log(2)),
c.push(g),e.push(a[d].data["0"]))}b=Normalizer.normalizeArray(c);a=[];for(d=0;d<b.length;d++)isNaN(parseFloat(c[d]))?a.push("#000000"):a.push(Colors.getColorByScoreValue(b[d]).HexString());for(var h in e){c=this.dataset.getVertexByName(e[h]);for(d=0;d<c.length;d++)this.formatter.getVertexById(c[d].getId()).getDefault().setFill(a[h])}};
function GenomicAttributesWidget(a,b){var c=this;this.id="GenomicAttributesWidget_"+Math.random();this.species=a;this.title="None";this.featureType="gene";this.columnsCount=null;null!=b&&(null!=b.title&&(this.title=b.title),null!=b.columnsCount&&(this.columnsCount=b.columnsCount),null!=b.featureType&&(this.featureType=b.featureType));this.listWidget=new ListWidget(b.listWidgetArgs);this.karyotypeWidget=new KaryotypePanel(this.getKaryotypePanelId(),this.species,{top:10,width:1E3,height:300,trackWidth:15});
this.attributesPanel=new AttributesPanel({height:240,columnsCount:this.columnsCount,wum:b.wum,tags:b.tags});this.onMarkerClicked=new Event(this);this.onTrackAddAction=new Event(this);this.attributesPanel.onDataChange.addEventListener(function(a,b){c.dataChange(b)});this.karyotypeWidget.onMarkerClicked.addEventListener(function(a,b){c.onMarkerClicked.notify(b)})}
GenomicAttributesWidget.prototype.draw=function(){var a=this;null==this.panel&&(this.karyotypePanel=Ext.create("Ext.panel.Panel",{height:350,maxHeight:350,border:0,bodyPadding:15,padding:"0 0 0 0",html:'<div id="'+this.getKaryotypePanelId()+'" ><div>'}),this.filtersButton=Ext.create("Ext.button.Button",{text:"Additional Filters",disabled:!0,listeners:{scope:this,click:function(){this.onAdditionalInformationClick()}}}),this.addTrackButton=Ext.create("Ext.button.Button",{text:"Add Track",disabled:!0,
handler:function(){a.onTrackAddAction.notify({features:a.features,trackName:a.attributesPanel.fileName})}}),this.panel=Ext.create("Ext.ux.Window",{title:this.title,resizable:!1,minimizable:!0,constrain:!0,closable:!0,items:[this.attributesPanel.getPanel(),this.karyotypePanel],width:1035,height:653,buttonAlign:"left",buttons:[this.addTrackButton,"->",{text:"Close",handler:function(){a.panel.close()}}],listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}}),
this.attributesPanel.barField.add(this.filtersButton),this.panel.setLoading(),this.drawKaryotype());this.panel.show()};
GenomicAttributesWidget.prototype.getMainPanel=function(){var a=this;null==this.panel&&(this.karyotypePanel=Ext.create("Ext.panel.Panel",{height:350,maxHeight:350,border:0,bodyPadding:15,padding:"0 0 0 0",html:'<div id="'+this.getKaryotypePanelId()+'" ><div>'}),this.filtersButton=Ext.create("Ext.button.Button",{text:"Additional Filters",disabled:!0,listeners:{scope:this,click:function(){this.onAdditionalInformationClick()}}}),this.addTrackButton=Ext.create("Ext.button.Button",{text:"Add Track",disabled:!0,
handler:function(){a.onTrackAddAction.notify({features:a.features,trackName:a.attributesPanel.fileName})}}),this.attributesPanel.getPanel(),this.attributesPanel.barField.add(this.filtersButton),this.drawKaryotype());return[this.attributesPanel.getPanel(),this.karyotypePanel]};
GenomicAttributesWidget.prototype.fill=function(a){var b=this,c=new CellBaseDataAdapter(this.species);c.successed.addEventListener(function(){b.karyotypePanel.setLoading("Retrieving data");for(var e=0;e<c.dataset.toJSON().length;e++)b.karyotypeWidget.mark(c.dataset.toJSON()[e]);b.features=c.dataset.toJSON();b.query={dataset:c.dataset,resource:a};b.karyotypePanel.setLoading(!1);b.filtersButton.enable();b.addTrackButton.enable()});c.fill("feature",this.featureType,a.toString(),"info")};
GenomicAttributesWidget.prototype.dataChange=function(a){try{this.karyotypePanel.setLoading("Connecting to Database");this.karyotypeWidget.unmark();for(var b=[],c=0;c<a.length;c++)b.push(a[c].data[0]);0<a.length?this.fill(b):this.karyotypePanel.setLoading(!1)}catch(e){alert(e)}finally{this.karyotypePanel.setLoading(!1)}};
GenomicAttributesWidget.prototype.drawKaryotype=function(){var a=this,b=new KaryotypeCellBaseDataAdapter(this.species);b.successed.addEventListener(function(){a.karyotypeWidget.onRendered.addEventListener(function(){});a.karyotypeWidget.onClick.addEventListener(function(){});a.karyotypeWidget.draw(b.chromosomeNames,b.dataset.json)});b.fill()};GenomicAttributesWidget.prototype.getKaryotypePanelId=function(){return this.id+"_karyotypePanel"};
GenomicAttributesWidget.prototype.onAdditionalInformationClick=function(){var a=this;this.listWidget.draw(this.query.dataset.toJSON(),this.query.resource);this.listWidget.onFilterResult.addEventListener(function(b,c){a.attributesPanel.store.clearFilter();a.attributesPanel.store.filter(function(a){for(var b=0;b<c.length;b++)if(c[b].data.stableId==a.data["0"])return!0})})};NetworkAttributesWidget.prototype.render=AttributesWidget.prototype.render;NetworkAttributesWidget.prototype.getButtons=AttributesWidget.prototype.getButtons;
function NetworkAttributesWidget(a){null==a&&(a={});var b=0.5*a.height,c=0.5*a.width;a.borderCls="";a.tags=["sif|json"];AttributesWidget.prototype.constructor.call(this,{height:b+325+75,width:c+24,title:a.title});this.networkHeigth=b;this.networkWidth=c;this.networkPanelId="NetworkAttributesWidget_"+Math.ceil(1E3*Math.random())}NetworkAttributesWidget.prototype.getNetworkPanelId=function(){return this.networkPanelId};
NetworkAttributesWidget.prototype.getDetailPanel=function(){return Ext.create("Ext.container.Container",{padding:5,flex:1,height:this.networkHeigth,style:"background: #eee;",cls:"x-unselectable",html:'<div id="'+this.getNetworkPanelId()+'" style="border:1px solid #bbb;" ><div>'})};
NetworkAttributesWidget.prototype.drawNetwork=function(a,b,c,e){this.dataset=b.clone();this.formatter=new NetworkDataSetFormatter({width:400,height:200});this.formatter.loadFromJSON(this.dataset,c.toJSON());var c=this.dataset.getVertices(),d;for(d in c)b=this.formatter.getVertexById(d).getDefault().getSize(),this.formatter.getVertexById(d).getDefault().setSize(0.3*b);d=this.dataset.getEdges();for(var f in d)b=this.formatter.getEdgeById(f).getDefault().getStrokeWidth(),this.formatter.getEdgeById(f).getDefault().setStrokeWidth(0.3*
b);f=new LayoutDataset;f.loadFromJSON(this.dataset,e.toJSON());this.networkWidget=new NetworkWidget({targetId:a,label:!1});this.networkWidget.draw(this.dataset,this.formatter,f);this.networkWidget.getFormatter().resize(this.networkWidth,this.networkHeigth)};
NetworkAttributesWidget.prototype.draw=function(a,b,c){var e=this;this.render();this.attributes={};this.verticesSelected=new Event(this);this.graphDataset=a;this.found=Ext.create("Ext.button.Button",{text:"Nodes found",hidden:!0,listeners:{scope:this,click:function(){(new InputListWidget({title:"Features found",headerInfo:"This nodes were found in the Graph"})).draw(this.foundNodes.join("\n"))}}});this.notFound=Ext.create("Ext.button.Button",{text:"nodes not found",hidden:!0,listeners:{scope:this,
click:function(){(new InputListWidget({title:"Features not found",headerInfo:"This nodes were not found in the grpah"})).draw(this.notFoundNodes.join("\n"))}}});this.attributesPanel.barInfo.insert(2,this.notFound);this.attributesPanel.barInfo.insert(2,this.found);this.attributesPanel.onDataChange.addEventListener(function(a,b){e.dataChanged(b)});this.drawNetwork(this.getNetworkPanelId(),a,b,c)};
NetworkAttributesWidget.prototype.getVertexAttributesByName=function(a){var b=this.attributesPanel.getData(),c=[];if(null!=b){for(var e=0;e<b.length;e++)b[e][0]==a&&c.push(b[e]);return c}return a};
NetworkAttributesWidget.prototype.dataChanged=function(a){this.foundNodes=[];this.notFoundNodes=[];for(var b=0;b<a.length;b++)null==this.graphDataset.getVertexByName(a[b].data["0"])?this.notFoundNodes.push(a[b].data["0"]):this.foundNodes.push(a[b].data["0"]);this.found.setText('<span class="dis">'+this.foundNodes.length+" results found </span> ");this.found.show();0<this.notFoundNodes.length&&(this.notFound.setText('<span class="err">'+this.notFoundNodes.length+" features not found</span>"),this.notFound.show());
this.onDataChanged(a)};NetworkAttributesWidget.prototype.onDataChanged=function(){this.verticesSelected.notify(this.getFoundVertices());this.networkWidget.deselectNodes();this.networkWidget.selectVerticesByName(this.getFoundVertices())};NetworkAttributesWidget.prototype.getFoundVertices=function(){return this.foundNodes};
function AttributesPanel(a){var b=this;this.targetId=null;this.id="AttributesPanel_"+Math.round(1E7*Math.random());this.title=null;this.width=1023;this.height=628;this.wum=!0;this.tags=[];this.borderCls="panel-border-bottom";this.columnsCount=null;null!=a&&(null!=a.wum&&(this.wum=a.wum),null!=a.title&&(this.title=a.title),null!=a.targetId&&(this.targetId=a.targetId),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height),null!=a.columnsCount&&(this.columnsCount=a.columnsCount),
null!=a.borderCls&&(this.borderCls=a.borderCls),null!=a.tags&&(this.tags=a.tags));this.browserData=new BrowserDataWidget;this.onDataChange=new Event(this);this.onFileRead=new Event(this);this.browserData.adapter.onReadData.addEventListener(function(a,e){var d=new TabularFileDataAdapter({comment:"#"});d.parse(e.data);b.makeGrid(d);b.uptadeTotalFilteredRowsInfo(d.lines.length);b.uptadeTotalRowsInfo(d.lines.length);b.fileNameLabel.setText('<span class="emph">'+e.filename+'</span> <span class="info">(server)</span>',
!1)})}AttributesPanel.prototype.draw=function(){var a=this.getPanel();null!=this.targetId&&a.render(this.targetId)};AttributesPanel.prototype.uptadeTotalRowsInfo=function(a){this.infoLabel.setText('<span class="dis">Total rows: </span><span class="emph">'+a+"</span>",!1)};AttributesPanel.prototype.uptadeTotalFilteredRowsInfo=function(a){this.infoLabel2.setText('<span class="dis">Filtered rows: </span><span class="emph">'+a+"</span>",!1)};
AttributesPanel.prototype.sessionInitiated=function(){null!=this.btnBrowse&&this.btnBrowse.enable()};AttributesPanel.prototype.sessionFinished=function(){null!=this.btnBrowse&&this.btnBrowse.disable()};
AttributesPanel.prototype.getPanel=function(){var a=this;null==this.panel&&(this.expresionAnalysisUploadFieldFile=Ext.create("Ext.form.field.File",{msgTarget:"side",width:75,emptyText:"Choose a local file",allowBlank:!1,buttonText:"Browse local",buttonOnly:!0,listeners:{scope:this,change:function(){a.panel.setLoading("Reading file");try{var b=new TabularFileDataAdapter({comment:"#"}),c=document.getElementById(this.expresionAnalysisUploadFieldFile.fileInputEl.id).files[0];a.fileName=c.name;a.fileNameLabel.setText('<span class="emph">'+
c.name+'</span> <span class="info">(local)</span>',!1);b.loadFromFile(c);b.onRead.addEventListener(function(){a.makeGrid(b);a.uptadeTotalFilteredRowsInfo(b.lines.length);a.uptadeTotalRowsInfo(b.lines.length);a.panel.setLoading(!1);a.onFileRead.notify()})}catch(e){alert(e),a.panel.setLoading(!1)}}}}),this.barField=Ext.create("Ext.toolbar.Toolbar"),this.barInfo=Ext.create("Ext.toolbar.Toolbar",{dock:"bottom"}),this.barHelp=Ext.create("Ext.toolbar.Toolbar",{dock:"top"}),this.clearFilter=Ext.create("Ext.button.Button",
{text:"Clear filters",disabled:!0,listeners:{scope:this,click:function(){null!=this.grid.filters&&(this.grid.filters.clearFilters(),this.store.clearFilter())}}}),this.helpLabel=Ext.create("Ext.toolbar.TextItem",{html:'<span class="dis">Click on the header down arrow to filter by column</span>'}),this.fileNameLabel=Ext.create("Ext.toolbar.TextItem",{html:'<span class="emph">Select a <span class="info">local</span> file or a <span class="info">server</span> file from your account.</span>'}),this.infoLabel=
Ext.create("Ext.toolbar.TextItem",{html:"&nbsp;"}),this.infoLabel2=Ext.create("Ext.toolbar.TextItem",{html:"&nbsp;"}),this.barField.add(this.expresionAnalysisUploadFieldFile),this.barInfo.add("->",this.infoLabel,this.infoLabel2),this.barHelp.add(this.fileNameLabel,"->",this.helpLabel),this.store=Ext.create("Ext.data.Store",{fields:["1","2"],data:[]}),this.grid=Ext.create("Ext.grid.Panel",{store:this.store,disabled:!0,border:0,columns:[{header:"Column 1",dataIndex:"1"},{header:"Column 2",dataIndex:"2"}]}),
this.panel=Ext.create("Ext.panel.Panel",{title:this.title,border:!1,layout:"fit",cls:this.borderCls,items:[this.grid],tbar:this.barField,width:this.width,height:this.height,maxHeight:this.height,buttonAlign:"right",listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}}),this.panel.addDocked(this.barInfo),this.panel.addDocked(this.barHelp));this.wum&&(this.btnBrowse=Ext.create("Ext.button.Button",{text:"Browse server",disabled:!0,listeners:{scope:this,
click:function(){this.browserData.draw($.cookie("bioinfo_sid"),this.tags)}}}),this.barField.add(this.btnBrowse),null!=$.cookie("bioinfo_sid")?this.sessionInitiated():this.sessionFinished());this.barField.add("-",this.clearFilter);return this.panel};AttributesPanel.prototype.getData=function(){return this.data};
AttributesPanel.prototype.makeGrid=function(a){this.data=a.lines;var b=[],c=[],e=[];null==this.columnsCount&&(this.columnsCount=this.data[0].length);for(var d=0;d<this.columnsCount;d++){var f=a.getHeuristicTypeByColumnIndex(d);b.push({name:d.toString(),type:f});c.push({header:"Column "+d.toString(),dataIndex:d.toString(),flex:1,filterable:!0,filter:{type:f}});e.push({type:f,dataIndex:d.toString()})}this.store=Ext.create("Ext.data.Store",{fields:b,data:this.data,listeners:{scope:this,datachanged:function(a){a.getRange();
this.uptadeTotalFilteredRowsInfo(a.getRange().length);this.onDataChange.notify(a.getRange())}}});a={ftype:"filters",local:!0,filters:e};null!=this.grid&&this.panel.remove(this.grid);this.grid=Ext.create("Ext.grid.Panel",{store:this.store,columns:c,border:0,features:[a]});this.panel.insert(0,this.grid);this.clearFilter.enable()};GenotypeGenomicAttributesWidget.prototype.draw=GenomicAttributesWidget.prototype.draw;GenotypeGenomicAttributesWidget.prototype.render=GenomicAttributesWidget.prototype.render;
GenotypeGenomicAttributesWidget.prototype.drawKaryotype=GenomicAttributesWidget.prototype.drawKaryotype;GenotypeGenomicAttributesWidget.prototype.makeGrid=GenomicAttributesWidget.prototype.makeGrid;GenotypeGenomicAttributesWidget.prototype.getKaryotypePanelId=GenomicAttributesWidget.prototype.getKaryotypePanelId;GenotypeGenomicAttributesWidget.prototype.dataChange=GenomicAttributesWidget.prototype.dataChange;GenotypeGenomicAttributesWidget.prototype.fill=GenomicAttributesWidget.prototype.fill;
GenotypeGenomicAttributesWidget.prototype.onAdditionalInformationClick=GenomicAttributesWidget.prototype.onAdditionalInformationClick;function GenotypeGenomicAttributesWidget(a,b){null==b&&(b={});b.title="Genotype";b.tags=["genotype"];b.featureType="snp";b.listWidgetArgs={title:"Filter",action:"filter",gridFields:"name,variantAlleles,ancestralAllele,mapWeight,position,sequence".split(",")};GenomicAttributesWidget.prototype.constructor.call(this,a,b)}
ExpressionGenomicAttributesWidget.prototype.draw=GenomicAttributesWidget.prototype.draw;ExpressionGenomicAttributesWidget.prototype.render=GenomicAttributesWidget.prototype.render;ExpressionGenomicAttributesWidget.prototype.drawKaryotype=GenomicAttributesWidget.prototype.drawKaryotype;ExpressionGenomicAttributesWidget.prototype.render=GenomicAttributesWidget.prototype.render;ExpressionGenomicAttributesWidget.prototype.makeGrid=GenomicAttributesWidget.prototype.makeGrid;
ExpressionGenomicAttributesWidget.prototype.getKaryotypePanelId=GenomicAttributesWidget.prototype.getKaryotypePanelId;ExpressionGenomicAttributesWidget.prototype.dataChange=GenomicAttributesWidget.prototype.dataChange;function ExpressionGenomicAttributesWidget(a,b,c){GenomicAttributesWidget.prototype.constructor.call(this,a,b,c);this.karyotypeWidget=new KaryotypePanel(this.getKaryotypePanelId(),this.getKaryotypePanelId(),{top:10,width:1E3,height:300,trackWidth:15})}
ExpressionGenomicAttributesWidget.prototype.dataChange=function(a){try{console.log(a);var b=this;this.karyotypePanel.setLoading("Connecting to Database");this.karyotypeWidget.unmark();var b=this,c=[];if(0<a.length){for(var e=0;e<a.length;e++)c.push(a[e].data[0]);var d=new CellBaseDataAdapter;d.successed.addEventListener(function(){b.karyotypePanel.setLoading("Retrieving data");for(var a=0;a<d.dataset.toJSON().length;a++)b.karyotypeWidget.mark(d.dataset.toJSON()[a]);b.karyotypePanel.setLoading(!1)});
d.fill("feature","gene",c.toString(),"info")}}catch(f){alert(f),this.panel.setLoading(!1)}};function AttributesWidget(a){this.id="AttributesWidget_"+Math.random();this.title="";this.width=1025;this.height=628;null!=a&&(null!=a.title&&(this.title=a.title),null!=a.targetId&&(this.targetId=a.targetId),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height));this.attributesPanel=new AttributesPanel({borderCls:a.borderCls,height:325})}AttributesWidget.prototype.draw=function(){this.render()};
AttributesWidget.prototype.getDetailPanel=function(){return{}};AttributesWidget.prototype.getButtons=function(){var a=this;return[{text:"Close",handler:function(){a.panel.close()}}]};
AttributesWidget.prototype.render=function(){null==this.panel&&(this.panel=Ext.create("Ext.ux.Window",{title:this.title,resizable:!1,constrain:!0,closable:!0,collapsible:!0,layout:{type:"vbox",align:"stretch"},items:[this.attributesPanel.getPanel(),this.getDetailPanel()],width:this.width,height:this.height,buttonAlign:"right",buttons:this.getButtons(),listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}}),this.panel.setLoading());this.panel.show()};
function ChartWidget(a){this.id="ChartWidget_"+Math.round(1E7*Math.random());this.title=null;this.width=750;this.height=300;null!=a&&(null!=a.title&&(this.title=a.title),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height))}ChartWidget.prototype.getStore=function(){return this.store};
ChartWidget.prototype.getChart=function(a){Ext.define("ChromosomeChart",{extend:"Ext.data.Model",fields:a});this.store=Ext.create("Ext.data.Store",{model:"ChromosomeChart",autoLoad:!1});return Ext.create("Ext.chart.Chart",{animate:!0,shadow:!0,store:this.store,width:this.width,height:this.height,axes:[{position:"left",fields:[a[0]],title:a[0],grid:!0,type:"Numeric",minimum:0},{title:a[1],type:"category",position:"bottom",fields:[a[1]],label:{rotate:{degrees:270}}}],series:[{type:"column",axis:"left",
gutter:80,yField:a[0],xField:a[1],style:{fill:"#38B8BF"}}]})};GenomicListWidget.prototype.draw=ListWidget.prototype.draw;GenomicListWidget.prototype.getActionButton=ListWidget.prototype.getActionButton;function GenomicListWidget(a){ListWidget.prototype.constructor.call(this,a);this.listPanel=new GenomicListPanel({title:!1,gridFields:a.gridFields});this.onSelected=this.listPanel.onSelected;this.onFilterResult=this.listPanel.onFilterResult;this.onTrackAddAction=new Event}
GenomicListWidget.prototype._render=function(){var a=this;null==this.panel&&(this.localizeButton=Ext.create("Ext.button.Button",{minWidth:80,text:"OK",disabled:!0,handler:function(){a.listPanel.onSelected.notify(a.listPanel.grid.getSelectionModel().getSelection()[0].data);a.panel.hide()}}),this.filterButton=Ext.create("Ext.button.Button",{minWidth:80,text:"OK",handler:function(){a.listPanel.onFilterResult.notify(a.listPanel.store.getRange());a.panel.hide()}}),this.panel=Ext.create("Ext.ux.Window",
{title:this.title,taskbar:Ext.getCmp(this.args.viewer.id+"uxTaskbar"),resizable:!1,constrain:!0,closable:!0,layout:"fit",minimizable:!0,width:this.width,height:this.height,items:[this.listPanel.grid],buttonAlign:"right",buttons:[{text:"Add Track",handler:function(){a.onTrackAddAction.notify(a.listPanel.features)},margin:"0 375 0 0 "},this.getActionButton(this.action),{text:"Close",handler:function(){a.panel.close()}}],listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}}))};
function ListWidget(a){this.targetId=null;this.id="ListWidget_"+Math.round(1E7*Math.random());this.width=1E3;this.height=500;this.action="localize";this.title="";this.args=a;null!=a&&(null!=a.title&&(this.title=a.title),null!=a.targetId&&(this.targetId=a.targetId),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height),null!=a.action&&(this.action=a.action));this.listPanel=new ListPanel({title:!1,gridFields:a.gridFields});this.onSelected=this.listPanel.onSelected;this.onFilterResult=
this.listPanel.onFilterResult}
ListWidget.prototype._render=function(){var a=this;null==this.panel&&(this.localizeButton=Ext.create("Ext.button.Button",{minWidth:80,text:"OK",disabled:!0,handler:function(){a.listPanel.onSelected.notify(a.listPanel.grid.getSelectionModel().getSelection()[0].data);a.panel.hide()}}),this.filterButton=Ext.create("Ext.button.Button",{minWidth:80,text:"OK",handler:function(){a.listPanel.onFilterResult.notify(a.listPanel.store.getRange());a.panel.hide()}}),this.panel=Ext.create("Ext.ux.Window",{title:this.title,
taskbar:Ext.getCmp(this.args.viewer.id+"uxTaskbar"),resizable:!1,constrain:!0,closable:!0,layout:"fit",minimizable:!0,width:this.width,height:this.height,items:[this.listPanel.grid],buttonAlign:"right",buttons:[this.getActionButton(this.action),{text:"Close",handler:function(){a.panel.close()}}],listeners:{scope:this,minimize:function(){this.panel.hide()},destroy:function(){delete this.panel}}}))};
ListWidget.prototype.draw=function(a,b){var c=this;this.listPanel.draw(a,b);this.listPanel.grid.getSelectionModel().on("selectionchange",function(){c.listPanel.grid.getSelectionModel().hasSelection()?c.localizeButton.enable():c.localizeButton.disable()});this._render();this.panel.show()};ListWidget.prototype.getActionButton=function(a){switch(a){case "localize":return this.localizeButton;case "filter":return this.listPanel.localizeButton.disable().hide(),this.filterButton}};
function ListPanel(a){this.targetId=null;this.id="ListPanel_"+Math.round(1E7*Math.random());this.title="List of Genes";this.width=1E3;this.height=500;this.borderCls="panel-border-bottom";this.gridFields="externalName,stableId,biotype,position,strand,description".split(",");null!=a&&(null!=a.title&&(this.title=a.title),null!=a.targetId&&(this.targetId=a.targetId),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height),null!=a.gridFields&&(this.gridFields=a.gridFields),null!=a.borderCls&&
(this.borderCls=a.borderCls));this.onSelected=new Event(this);this.onFilterResult=new Event(this)}
ListPanel.prototype._getGeneGrid=function(){for(var a=this,b=this.gridFields,c=[],e=[],d=0;d<b.length;d++)c.push({type:"string",dataIndex:b[d]}),e.push({header:this.gridFields[d],dataIndex:this.gridFields[d],flex:1});this.store=Ext.create("Ext.data.Store",{fields:b,groupField:"biotype",autoload:!1});c={ftype:"filters",local:!0,filters:c};this.infoToolBar=Ext.create("Ext.toolbar.Toolbar");this.infoLabelOk=Ext.create("Ext.toolbar.TextItem",{html:"&nbsp;"});this.infoLabelNotFound=Ext.create("Ext.toolbar.TextItem",
{html:"&nbsp;"});this.clearFilter=Ext.create("Ext.button.Button",{text:"Clear filters",listeners:{scope:this,click:function(){null!=this.grid.filters&&this.grid.filters.clearFilters()}}});this.found=Ext.create("Ext.button.Button",{text:"Features found",hidden:!0,listeners:{scope:this,click:function(){(new InputListWidget({title:"Features found",headerInfo:"This features were found in the database"})).draw(this.queriesFound.join("\n"))}}});this.notFound=Ext.create("Ext.button.Button",{text:"Features not found",
hidden:!0,listeners:{scope:this,click:function(){(new InputListWidget({title:"Features not found",headerInfo:"This features were not found in the database"})).draw(this.queriesNotFound.join("\n"))}}});this.exportButton=Ext.create("Ext.button.Button",{text:"Export to Text",handler:function(){(new InputListWidget({width:1100,title:"VCS content",headerInfo:"Export results"})).draw(a._getStoreContent())}});this.localizeButton=Ext.create("Ext.button.Button",{text:"Localize on karyotype",handler:function(){a._localize()}});
this.infoToolBar.add(["->",this.exportButton,this.localizeButton,"-",this.found,this.notFound,this.clearFilter]);return this.grid=Ext.create("Ext.grid.Panel",{border:0,store:this.store,features:[c],bbar:this.infoToolBar,columns:e,selModel:{mode:"SINGLE"}})};
ListPanel.prototype._localize=function(){var a=this,b=new KaryotypePanelWindow;b.onRendered.addEventListener(function(){for(var c=[],e=0;e<a.original.length;e++)for(var d=0;d<a.original[e].length;d++)c.push(a.original[e][d]);b.mark(c)});b.onMarkerChanged.addEventListener(function(b,e){a.onSelected.notify(e)});b.draw()};
ListPanel.prototype.setTextInfoBar=function(a,b,c){this.found.setText('<span class="dis">'+a+" results found </span> ");this.found.show();0<c&&(this.notFound.setText('<span class="err">'+c+" features not found</span>"),this.notFound.show())};
ListPanel.prototype._getStoreContent=function(){for(var a=new String,b=0;b<this.store.data.items.length;b++){var c=new String;if(0==b){for(var e=0;e<this.gridFields.length;e++)c=c+this.gridFields[e]+"\t";c+="\n"}for(e=0;e<this.gridFields.length;e++)c=c+this.store.data.items[b].data[this.gridFields[e]]+"\t";c+="\n";a+=c}return a};
ListPanel.prototype._render=function(){null==this.panel&&(this.panel=Ext.create("Ext.panel.Panel",{height:240,layout:"fit",cls:this.borderCls,title:this.title,border:!1}));this.panel.add(this._getGeneGrid())};
ListPanel.prototype.draw=function(a,b){this._render();!1==b instanceof Array&&(b=b.split(","));this.original=a;this.queriesNotFound=[];this.queriesFound=[];for(var c=0,e=[],d=0;d<a.length;d++){0==a[d].length?(c++,this.queriesNotFound.push(b[d])):this.queriesFound.push(b[d]);for(var f=0;f<a[d].length;f++)a[d][f].position=a[d][f].chromosome+":"+a[d][f].start+"-"+a[d][f].end,e.push(a[d][f])}this.features=e;this.setTextInfoBar(e.length,this.original.length,c);this.store.loadData(e,!1)};
GenomicListPanel.prototype._getGeneGrid=ListPanel.prototype._getGeneGrid;GenomicListPanel.prototype._localize=ListPanel.prototype._localize;GenomicListPanel.prototype.setTextInfoBar=ListPanel.prototype.setTextInfoBar;GenomicListPanel.prototype._getStoreContent=ListPanel.prototype._getStoreContent;GenomicListPanel.prototype._render=ListPanel.prototype._render;GenomicListPanel.prototype.draw=ListPanel.prototype.draw;function GenomicListPanel(a){ListPanel.prototype.constructor.call(this,a)}
function TextWindowWidget(){this.windows=[]}TextWindowWidget.prototype.draw=function(a){myRef=window.open("data:text/csv,field1%2Cfield2%0Afoo%2Cbar%0Agoo%2Cgai%0A","mywin","left=20,top=20,width=500,height=200");myRef.document.write(a)};function ClienSideDownloaderWindowWidget(){this.windows=[]}ClienSideDownloaderWindowWidget.prototype.draw=function(a,b){myRef=window.open("data:text/csv,"+b,"mywin","left=20,top=20,width=500,height=200");myRef.document.write(a)};
Ext.define("Ext.ux.Window",{extend:"Ext.window.Window",minimizable:!0,constrain:!0,collapsible:!0,initComponent:function(){this.callParent();null!=this.taskbar&&(this.zIndexManager=this.taskbar.winMgr,this.iconCls="icon-grid",this.button=Ext.create("Ext.button.Button",{text:this.title,window:this,iconCls:this.iconCls,handler:function(){this.window.zIndexManager.front==this.window?this.window.minimize():this.window.show()}}),this.taskbar.add(this.button),this.contextMenu=new Ext.menu.Menu({items:[{text:"Close",
window:this,iconCls:"tools-icons x-tool-close",handler:function(){this.window.close()}}]}),this.button.getEl().on("contextmenu",function(a){a.preventDefault();this.contextMenu.showAt(a.getX(),a.getY()-10-25*this.contextMenu.items.length)},this),this.button.on("destroy",function(){this.window.close()}),this.on("destroy",function(){!0!=this.button.destroying&&this.button.destroy()}),this.on("minimize",function(){this.hide()}),this.on("deactivate",function(){this.zIndexManager&&this.zIndexManager.front.ghostPanel&&
this.zIndexManager.unregister(this.zIndexManager.front.ghostPanel);this.button.toggle(!1)}),this.on("activate",function(){this.button.toggle(!0)}))}});function FilterPanel(a){this.id="FilterPanel_"+Math.round(1E7*Math.random());this.height=this.width=this.title=this.targetId=null;null!=a&&(null!=a.title&&(this.title=a.title),null!=a.targetId&&(this.targetId=a.targetId),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height))}
FilterPanel.prototype.draw=function(a){a="manzanas,pera,meloconton,sandia,melon,naranja,manzanas,pera,meloconton,sandia,melon,naranja,manzanas,pera,meloconton,sandia,melon,naranja".split(",");this.render(a);null!=this.targetId&&this.panel.render(this.targetId)};
FilterPanel.prototype.render=function(a){for(var b=[],c=0;c<a.length;c++)b.push({boxLabel:a[c],checked:!0});null==this.panel&&(this.panel=Ext.create("Ext.panel.Panel",{title:this.title,width:this.width,height:this.height,layout:"vbox",defaultType:"checkboxfield",items:b}))};
function InputListWidget(a){this.id="InputListWidget"+Math.round(1E7*Math.random());this.title="List";this.width=500;this.height=350;this.headerInfo="Write a list separated only by lines";this.args=a;null!=a&&(null!=a.title&&(this.title=a.title),null!=a.width&&(this.width=a.width),null!=a.height&&(this.height=a.height),null!=a.headerInfo&&(this.headerInfo=a.headerInfo));this.onOk=new Event(this)}
InputListWidget.prototype.draw=function(a){var b=this;null==a&&(a=new String);null==this.panel&&(this.infobar=Ext.create("Ext.toolbar.Toolbar",{cls:"bio-border-false"}),this.infoLabel=Ext.create("Ext.toolbar.TextItem",{html:this.headerInfo}),this.infobar.add(this.infoLabel),this.editor=Ext.create("Ext.form.field.TextArea",{id:this.id+"genelist_preview",xtype:"textarea",name:"file",margin:"-1",width:this.width,height:this.height,enableKeyEvents:!0,cls:"dis",style:"normal 6px tahoma, arial, verdana, sans-serif",
value:a,listeners:{scope:this,change:function(){this.validate()}}}),a=Ext.create("Ext.panel.Panel",{border:!1,items:[this.infobar,this.editor]}),this.okButton=Ext.create("Ext.button.Button",{text:"Ok",disabled:!0,listeners:{scope:this,click:function(){this.onOk.notify(Ext.getCmp(this.id+"genelist_preview").getValue().split("\n"));b.panel.close()}}}),this.panel=Ext.create("Ext.ux.Window",{title:this.title,taskbar:Ext.getCmp(this.args.viewer.id+"uxTaskbar"),layout:"fit",resizable:!1,collapsible:!0,
constrain:!0,closable:!0,items:[a],buttons:[this.okButton,{text:"Cancel",handler:function(){b.panel.close()}}],listeners:{scope:this,destroy:function(){delete this.panel}}}));this.panel.show()};InputListWidget.prototype.validate=function(){""!=this.editor.getValue()?this.okButton.enable():this.okButton.disable()};
